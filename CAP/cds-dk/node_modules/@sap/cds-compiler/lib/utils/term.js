///
/// This file is used for color output to stderr and stdout.
/// Use `term.error`, `term.warn` and `term.info` as they use color output
/// per default if the process runs in a TTY, i.e. stdout as well as
/// stderr are TTYs. stderr/stdout are no TTYs if they (for example)
/// are piped to another process or written to file:
///
///    node myapp.js              # stdout.isTTY: true,      stderr.isTTY: true
///    node myapp.js | cat        # stdout.isTTY: undefined, stderr.isTTY: true
///    node myapp.js |& cat       # stdout.isTTY: undefined, stderr.isTTY: undefined
///    node myapp.js > out.txt    # stdout.isTTY: undefined, stderr.isTTY: true
///    node myapp.js 2> out.txt   # stdout.isTTY: true,      stderr.isTTY: undefined
///

const stderrHasColor = process.stderr.isTTY
const stdoutHasColor = process.stdout.isTTY

let hasColor = stdoutHasColor && stderrHasColor

module.exports.useColor = (mode) => {
  switch(mode) {
    case false:
    case 'never':
      hasColor = false;
      break;
    case true:
    case 'always':
      hasColor = true;
      break;
    default:
      hasColor = stdoutHasColor && stderrHasColor
      break;
  }
};

// https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences
const t = module.exports.codes = {
  reset: '\x1b[0m', // Default
  bold: '\x1b[1m', // Bold/Bright
  link: '\x1b[4m', // underline
  red: '\x1b[31m', // Foreground Red
  green: '\x1b[32m', // Foreground Green
  yellow: '\x1b[33m' // Foreground Yellow
}

const as = module.exports.as = (codes, o) => {
  return hasColor ? (codes + o + t.reset) : ('' + o)
}

const asError = module.exports.error = o => as(t.red + t.bold, o)
const asWarning = module.exports.warn  = o => as(t.yellow, o)
const asInfo = module.exports.info  = o => as(t.green, o)
module.exports.link  = o => as(t.link, o)
module.exports.bold  = o => as(t.bold, o)

module.exports.asSeverity = (severity, msg) => {
  switch((severity + '').toLowerCase()) {
    case 'error': return asError(msg);
    case 'warning': return asWarning(msg);
    case 'info': return asInfo(msg);
    // or e.g. 'none'
    default: return msg;
  }
}
