const { builtin:{types:{entity}} } = require('./index')
const set = (o,p,value) => { Object.defineProperty(o,p,{value}); return value }

/** Resolves a query's _target */
module.exports = function cds_infer_query (q, defs) {

	if (q._target)  return q._target

    const { SELECT, INSERT, UPDATE, DELETE } = q
    const ref = (
        SELECT ? SELECT.from.ref :
        INSERT ? INSERT.entity :
        UPDATE ? UPDATE.entity :
        DELETE ? DELETE.entity :
        undefined
    )

    //////////////////////////////////////////////////////////////////////
    // REVISIT: setting .target for compatibility with runtimes only(!)
        Object.defineProperty (q,'target',{get:()=>q._target})
    //> merge these PRs then remove:
    // https://github.wdf.sap.corp/cdx/cds-ql/pull/556
    //////////////////////////////////////////////////////////////////////

    try { return set (q,'_target', !ref ? undefined
        : 'name' in ref ? ref
        : 'length' in ref ? _infer (ref,defs) : _resolve (ref,defs)
    )} catch(e) {
        throw new Error ('cannot resolve target of query: '+ require('util').inspect (q,{depth:11}))
    }
}

function _infer (ref, defs) {
	let target = _resolve (ref[0].id||ref[0], defs)
	for (let i=1; i<ref.length; ++i) {
        const r = ref[i].id || ref[i]
        let a = target.elements[r] || _unresolved (target.name +':'+r)
        target = defs [a.target] || _unresolved (a.target)
	}
    return target
}

const _resolve = (x,defs) => defs[x] || (defs[x] = _unresolved(x))
const _unresolved = (x,p=entity) => ({name:x, __proto__:p, isUnresolved:true})
