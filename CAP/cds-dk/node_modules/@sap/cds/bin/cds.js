#!/usr/bin/env node
// preferrably use the local cli embedded with @sap/cds -> might change in future
module.exports = require('../lib/utils/require') .local (module, '@sap/cds/bin/cds',
()=> function (cmd = process.argv[2], ...args) {

  const { normalize, join, dirname } = require ('path')
  const cds = require('../lib/cds') //> IMPORTANT: ensure we are the first to load @sap/cds locally
  const DEBUG = cds.debug('cli')

  DEBUG && DEBUG (`cli running from ${__filename}...`)

  const Shortcuts = {
    i: 'init',
    c: 'compile',
    m: 'import',
    s: 'serve',
    e: 'env',
    b: 'build',
    d: 'deploy',
    w: 'watch',
    v: 'version', '-v':'version', '--version':'version',
    r: 'repl', '-r':'repl', '-e':'eval',
    h: 'help', '?':'help', '-?':'help', '--help':'help',
  }

  if (cmd in Shortcuts)  cmd = Shortcuts [cmd]
  if (!args.length)  args = process.argv.slice(3)

  // exits to help and version...
  const help = require('./help') .with (_load, Shortcuts)
  if (!cmd && process.stdin.isTTY)  return help()
  if (args.some(a => Shortcuts[a]==='help'))   return help ([cmd])

  // determine and load impl for requested cmd
  const task = _load (cmd, /*default:*/ ()=>{
    DEBUG && DEBUG (`'${cmd}' doesn't match a known command -> defaulting to 'cds compile ${cmd}'...`)
    cmd && args.unshift(cmd)
    return './compile'
  })

  // actually run the task
  _add_error_handlers()
  const { argv, options } = require('./utils/cli') .parseArgs (task,args)
  const result = task.call ({help}, argv, options)

  // handle task outcomes
  if (result && 'then' in result && typeof result.then === 'function') { // handle promise results
    result.then (res => { if (parseInt(res)) process.exitCode = res })// interpret returned int as exit code
  }

  return result

  // --------------------------------------------------------------------
  // Helper Functions...

  function _load (cmd, _default=()=>'./compile') {
    return ( typeof cmd === 'function' && cmd
      // handle `cds cds` as `cds compile cds` -> would otherwise recursively load ./cds.js
      || /^(\.[/\\])?cds/i.test(cmd) && _require (_default())
      // fetch from locally installed @sap/cds
      || _local ('.',cmd)
      // fetch from locally installed @sap/cds-dk
      || _local ('@sap/cds-dk/bin',cmd)
      // fetch from globally installed @sap/cds-dk, if launched directly via `cds`
      // also consider cds-dk sources (not starting with @sap/ !)
      || _require (join (dirname (require.main.filename), cmd))
      // fetch from globally installed @sap/cds-dk, if launched via `npm run` scripts
      || _global ('@sap/cds-dk/bin',cmd)
      // we didn't find a @sap/cds-dk -> warn on well-known @sap/cds-dk commands
      || _requires_cdsdk (cmd)
      // otherwise use cmd = 'compile' as default...
      || _local (_default())
    )
  }

  function _require (path) {
    if (path) try {
      const task = require(path)
      DEBUG && DEBUG (`cli resolved task at '${require.resolve (path)}'`)
      return task
    } catch(e) {
      if (e.code !== 'MODULE_NOT_FOUND')  throw e
      DEBUG && DEBUG (`cli couldn't resolve '${path}'`)
    }
  }

  // NOTE: in all these functions, argument `path` is expected to be a module
  // name fragment in posix(!) format

  function _local (...args) {
    // try fetching a locally installed module. -> cmd can be relative or absolute
    return _require (args.join('/'))
  }

  function _global (path, cmd) {
    // if launched from npm, we expect the global package under npm's global lib/node_modules
    const root = process.env.npm_config_prefix || process.env.NPM_CONFIG_PREFIX
    if (root) return _require (join (root, 'lib', 'node_modules', normalize(path), cmd))
  }

  function _requires_cdsdk (cmd) {
    if (cmd in {init:1,add:1,import:1,watch:1}) {
      console.error (`
      You need to have '@sap/cds-dk' installed to use 'cds ${cmd}'.
      Please do so with:

      npm rm -g @sap/cds
      npm i -g @sap/cds-dk
      `)
      return ()=>{}
    }
  }

  function _add_error_handlers(){
    if (cmd !== 'repl')  {
      const handler = e => {
        require ('./utils/cli') .log (e.errors || e,{withStack:!e.errors,'log-level':'error'})
        process.exit(1)
      }
      process.on('uncaughtException', handler)
      process.on('unhandledRejection', handler)
    }
    process.on ('SIGTERM', ()=>{ console.log(); process.exit() })
    process.on ('SIGHUP', ()=>{ console.log(); process.exit() })
    process.on ('SIGINT', ()=>{ console.log(); process.exit() })
    process.on ('SIGUSR2', ()=>{ console.log(); process.exit() }) // by nodemon
  }

})

/* eslint no-console:off */
// only run directly if not called as a sub-module
if (!module.parent)  module.exports()
