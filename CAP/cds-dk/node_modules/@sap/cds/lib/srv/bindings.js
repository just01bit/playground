const DEBUG = /\b(y|all|serve)\b/.test (process.env.DEBUG) && console.warn
// || console.debug

const cds = require ('../cds')
const { readFile, readFileSync, writeFile, writeFileSync } = require ('fs')
const [ read, write ] = [ readFile, writeFile ].map(require('util').promisify)
const path = require ('path')
const registry = path.join (require('os').homedir(), '.cds-services.json')

/** TODO: Add documentation */
module.exports = class Bindings {

    static then(r,e) {
        const bindings = new Bindings
        cds.once ('listening', ({url})=> bindings.export (cds.service.providers, url))
        return bindings.import() .then (r,e)
    }

    constructor() {
        this._source = registry
        this.cds = {provides:{}}
    }

    async load (sync) {
        DEBUG && DEBUG('[cds] - reading bindings from:', this._source)
        try { Object.assign (this, JSON.parse (sync ? readFileSync (this._source) : await read (this._source))) }
        catch (e) { /* ignored */ }
        return this
    }
    async store (sync) {
        DEBUG && DEBUG ('[cds] - writing bindings to:', this._source)
        const json = JSON.stringify ({cds:this.cds},null,'  ')
        return sync ? writeFileSync (this._source, json) : write (this._source, json)
    }

    async import() {
        const required = cds.env.requires
        if (required) {
            const provided = (await this.load()) .cds.provides
            for (let each in provided) {
                const req = required[each]
                if (req)  Object.assign (
                    req.credentials || (req.credentials = {}),
                    provided[each].credentials || provided[req.service].credentials
                )
            }
        }
        return this
    }

    async export (services, url) {
        this.cleanup (this.url = url)
        // register our services
        const provides = this.cds.provides
        for (let each of services) {
            // if (each.name in cds.env.requires)  continue
            const options = each.options || {}
            provides[each.name] = {
                kind: options.to || 'odata',
                credentials: {
                    ...options.credentials,
                    url: url + each.path
                }
            }
        }
        process.on ('exit', ()=>this.purge())
        return this.store()
    }

    purge() {
        this.load(true)
        DEBUG && DEBUG ('[cds] - purging bindings from:', this._source)
        this.cleanup()
        this.store(true)
    }

    cleanup (url=this.url) {
        // remove all services served at the same url
        const all = this.cds.provides
        for (let [key,srv] of Object.entries (all)) {
            if (srv.credentials && srv.credentials.url && srv.credentials.url.startsWith(url))  delete all [key]
        }
        return this
    }
}

const {NODE_ENV} = process.env
if (NODE_ENV === 'production' || NODE_ENV === 'test' || cds.env.no_bindings) {
    module['exports'] = { then: (r) => r() }
} else {
    console.log ('[cds] - using bindings from:', {registry})
}
/* eslint no-console:off */
