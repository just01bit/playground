const DatabaseService = require ('./DatabaseService')
const cds = require ('../../cds')

module.exports = class SQLDatabase extends DatabaseService {

    set model(m) {
        super.model = m && 'definitions' in m ? cds.compile.for.odata (m,{version:'v4'}) : m //> REVISIT: should be compile.for.sql ?!
    }

    async deploy (model, options={}) {
        const {cds} = global
        const create_entities = cds.compile.to.sql (model)
        if (!create_entities || create_entities.length === 0) return //> nothing to deploy

        const drop_views=[], drop_tables=[]
        for (let each of create_entities) {
            const [, table, entity ] = each.match (/^\s*CREATE (?:(TABLE)|VIEW)\s+"?([^\s(]+)"?/im) || []
            if (table) drop_tables.push ({DROP:{ entity }})
            else drop_views.push ({DROP:{ view: entity }})
        }

        if (options.dry) {
            const log = console.log // eslint-disable-line no-console
            for (let {DROP:{view}} of drop_views) log ('DROP VIEW IF EXISTS '+view+';'); log()
            for (let {DROP:{entity}} of drop_tables) log ('DROP TABLE IF EXISTS '+entity+';'); log()
            for (let each of create_entities) log (each+';\n')
            return
        }

        const tx = this.transaction()
        await tx.run (drop_views)
        await tx.run (drop_tables)
        await tx.run (create_entities)
        await tx.commit()

        return true
    }

}
