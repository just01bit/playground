const cdsc = require ('./cdsc')


/** cds.parse is both, a namespace and a shortcut for cds.parse.cdl */
const cds_parse = (...args) => parse.cdl(...args)
const parse = module.exports = Object.assign (cds_parse, {

    cdl: (cdl,o) => _csn4 (cdsc.compileSources (cdl,o)),
    cql: cdsc.parseToCqn,
    expr: cdsc.parseToExpr,
    xpr: x => parse.expr(x).xpr,
    ref: x => parse.expr(x).ref,

    yaml: (...args) => YAML.parse (...args),
    json: (...args) => JSON.parse (...args),
    csv: (...args) => (parse.csv = require('../utils/csv').parse) (...args),

    _csn4
})



/** Returns a csn for an xsn which preserves .namespace and ._sources */
function _csn4 (xsn, csn = cdsc.compactModel(xsn)) {
    // REVISIT w/ @Simon kÃ¶nnen wir diese Dinge nach innen ziehen?
    // add namespace
    for (let {namespace:ns} of Object.values (xsn.sources)) {
        if (ns)  csn.namespace = ns.path.map(x => x.id).join('.')
        break // NOSONAR
    }
    // add sources
    Object.defineProperty (csn, '_sources', {value: Object.keys (xsn.sources) })
    // return _4json (csn)
    return csn
}


/** Proxy to yaml.js */
const YAML = {
  parse (...args) {
    try {
        return (this.parse = require('yamljs').parse) (...args)
    } catch(e) {
        if (e.code === 'MODULE_NOT_FOUND') throw this._requires_yamljs()
    }
  },
  _requires_yamljs: ()=> new Error (`

    Using 'cds.parse.yaml' requires package 'yaml.js' to be installed, e.g.:
    npm add yamljs

  `)
}


// adjust for existing/former implementation
const {snapi} = require('../cds').env.features
if (!snapi) {
  const _parse = Object.assign ((...args) => _parse.cdl(...args), parse, {
    cdl: (...args) => (_parse.cdl = require('./cdsv').parse) (...args),
    cql: (...args) => (_parse.cql = require('./cdsv').parseCql) (...args),
    csv: (...args) => (_parse.csv = require('../utils/csv').parse) (...args),
    expr: (...args) => (_parse.expr = require('./cdsv').parseExpr) (...args),
    new: parse
  })
  Object.assign (module,{exports:_parse})
}