if (!global.cds) {

    const cds = require ('@sap/cds-reflect'), { extend, lazified } = cds
    const primary_db = require('./srv/classes/facade')
    require = lazified (module)  // eslint-disable-line

    /** cds is the central facade to all cds functions */
    module.exports = global.cds = extend (cds) .with (primary_db, {

        // Loading and Compiling Models
        resolve: require ('./models/resolve'),
        load: require ('./models/load'),
        get: lazy => cds.load.only,
        parse: require ('./models/parse'),
        compile: require ('./models/compile-new'),
        localize: require ('./models/i18n'),

        // Providing and Consuming Services
        services: {},
        service: require ('./srv/service'),
        connect: require ('./srv/connect'),
        deploy: require ('./srv/deploy'),
        server: require ('../server'),
        serve: require ('./srv/serve'),
        srv: require ('./srv/classes'),
        ql: require ('./ql'),

        // Helpers
        requires: lazy => cds.env.requires, // shortcut
        require: require ('./utils/require'),
        error: require ('./utils/errors'),
        exec: require ('../bin/cds'),
        env: require ('./env'),
        utils: require ('./utils/fs'),
        write: require('./utils/write'),
        debug (x='all', _prefix='[cds] -') {
            if (RegExp(`\\b(true|y|all|${x})\\b`) .test (process.env.DEBUG))
                return (...args) => console.warn (_prefix, ...args) // eslint-disable-line
        },

        // Information
        version: lazy => module.require('../package.json').version,
        home: lazy => __dirname.slice(0,-4),

    })


    // Workaround for a glitch with jest in Node < v10
    if (process.env.NODE_ENV === 'test' && process.version.match(/v(\d+)/)[1] < 10) cds.ql

    // Add globals to cds and forwards to cds.ql
    extend (global) .with (lazified ({
        SELECT: lazy => cds.ql.SELECT,
        INSERT: lazy => cds.ql.INSERT,
        UPDATE: lazy => cds.ql.UPDATE,
        DELETE: lazy => cds.ql.DELETE,
        CREATE: lazy => cds.ql.CREATE,
        DROP: lazy => cds.ql.DROP,
    }))

    // legacy and to be moved stuff -> hidden for tools in cds.__proto__ ...
    extend (cds.__proto__) .with (lazified ({
        in: (cwd) => !cwd ? cds : {__proto__:cds, cwd, env: cds.env.for('cds',cwd) },
        get session() { return cds.db },
        get options() { return cds.db && cds.db.options },
        get unfold() { return cds.compile },
        get config() { return cds.env },
        build: require('./build'),
        mtx: require('./mtx'),
    }))

} else Object.assign(module,{exports:global.cds})
