const defaults = module.exports = {

  features: {
    fiori_preview: true,
    skip_unused: true,
    one_model: true,
    snapi: false,
    localized: true,
  },

  set roots(v) { set (this, 'roots', v) },
  get roots() {
    return this.roots = Object.values(this.folders) .concat ([ 'schema', 'services' ])
  },

  folders: { // IMPORTANT: order is significant for cds.load('*')
    db: 'db/',
    srv: 'srv/',
    app: 'app/',
  },

  '[development]': {
    auth: {
      passport: {
        strategy: 'mock',
        users: {
          alice: { roles: [ 'admin' ] },
          bob: { roles: [ 'builder' ] },
          '*': true
        }
      }
    },
  },

  i18n: {
    folders: ['_i18n', 'i18n', 'assets/i18n'],
    for_sqlite: ['de','fr'],
    default_language: 'en'
  },

  requires: {
    db: undefined,
    auth: undefined,
    monitoring: undefined,
    logging: undefined,
    destinations: undefined,
    audit: undefined,
    sql: {
      '[development]': { kind: 'sqlite', credentials: { database: ':memory:' }},
      '[production]': { use: 'hana' },
    },
    sqlite: {
      // use: '@sap/cds-sqlite', // enforce using sqlite when accessed through <sql>
      use: 'sqlite', // enforce using sqlite when accessed through <sql>
      credentials: { database: 'sqlite.db' }
    },
    hana: {
      // use: '@sap/cds-hana', // enforce using hana when accessed through <sql>
      use: 'hana', // enforce using hana when accessed through <sql>
    },
    messaging: {
      '[development]': { kind: 'local' },
      '[production]': {},
    },
    'file-based-messaging': {
      credentials: {
        get file() { return this.file = require('path').join(defaults.tmp,'cds-message-box') },
        set file(v) { set (this, 'file', v) },
      }
    },
    'enterprise-messaging': {},
  },

  odata: {
    version: 'v2',
    format: 'flat' // or 'structured'
  },

  sql: {
    names: 'plain' // or 'quoted', or 'hdbcds'
  },

  hana: {
    syntax: 'hdbcds' // or 'hdi'
  },

  build: {
    target: 'gen'
  },

  mtx: {
    api: {
      model: true,
      provisioning: true,
      metadata: true
    },
    domain: '__default__'
  },

  cdsc: {
    // toSql: { associations: 'joins' },
    // newCsn: true,
    smart: {
      // to_many: true
    }
  },

  get tmp() {
    return set (this, 'tmp', require('os').tmpdir())
  },

}

function set (o,p,value) {
  Object.defineProperty (o, p, {value,configurable:true,writable:true})
  return value
}