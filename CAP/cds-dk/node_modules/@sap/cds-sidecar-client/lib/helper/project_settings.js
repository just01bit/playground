const SETTINGS_FOLDER = '.mtx';
const SETTINGS_FILE = '.projects';

const fse = require('fs-extra');
const clientLog = require('./logging');
const path = require('path');
const os = require('os');

class ProjectSettings {

    static __getUserSettingsPath() {
        const homedir = os.homedir();
        return path.join(homedir, SETTINGS_FOLDER);
    }

    constructor() {
        const userTokenPath = ProjectSettings.__getUserSettingsPath();
        this.path = path.join(userTokenPath, SETTINGS_FILE);
    }

    _formatSettingLogOutput(settings) {
        const output = JSON.parse(JSON.stringify(settings));
        if (output) {
            Object.values(output).forEach((entry) => {
                if (entry.token) {
                    entry.token = entry.token.substring(0, 20) + '...';
                }
            });
            return JSON.stringify(output);
        } else {
            return ('{}');
        }
    }

    async _loadSettingsFile() {
        try {
            const allSettings = await fse.readJson(this.path);
            clientLog.debug(null, 'Found stored project settings: ' + this._formatSettingLogOutput(allSettings));
            return allSettings || {};
        } catch (error) {
            clientLog.debug(error, 'No project settings file found');
        }
        return {};
    }

    async _saveSettingsFile(settings) {
        clientLog.debug(null, 'Stored project settings: ' + this._formatSettingLogOutput(settings));
        await fse.outputJson(this.path, settings, { spaces: 2 });
    }

    async addSettings(projectPath, projectSettings) {
        const settings = await this._loadSettingsFile();
        settings[projectPath] = projectSettings;
        await this._saveSettingsFile(settings);
    }

    async loadSettings(projectPath) {
        const settings = await this._loadSettingsFile();
        return settings[projectPath];
    }

    async removeSettings(projectPath) {
        const settings = await this._loadSettingsFile();
        if (!settings[projectPath]) {
            clientLog.log('No project settings found for project ' + projectPath);
        } else {
            delete settings[projectPath];
            await this._saveSettingsFile(settings);
        }
    }

    async removeAllSettings() {
        await this._saveSettingsFile({});
    }
}

module.exports = ProjectSettings;
