const generateUUID = require('@sap/cds-foss')('uuid/v4')
const { isActiveEntityRequested, removeIsActiveEntityRecursively } = require('../utils/draftWhereUtils')
const { ensureDraftsSuffix } = require('../utils/draftUtils')

const _getETag = context => {
  return Object.values(context.target.elements).find(element => {
    return element['@odata.etag']
  })
}

const _getWhere = context => {
  return (
    (context.query.SELECT && context.query.SELECT.where) ||
    (context.query.UPDATE && context.query.UPDATE.where) ||
    (context.query.DELETE && context.query.DELETE.where)
  )
}

const _getETagElement = context =>
  Object.values(context.target.elements).find(element => {
    return element['@odata.etag']
  })

const _getSelectCQN = (context, where) =>
  context.statements.SELECT.from(
    isActiveEntityRequested(where) ? context.target.name : ensureDraftsSuffix(context.target.name)
  ).columns([_getETag(context).name])

const _generateETag = (context, etagElement) => {
  if ((context.event === 'CREATE' || context.event === 'UPDATE') && etagElement.type === 'cds.UUID') {
    context.data[etagElement.name] = generateUUID()
  }
}

/**
 * Generic handler for ETag validation
 *
 * @alias module:handlers.beforeETagCheck
 */
const beforeETagCheck = model => async context => {
  if (context._.odataReq.getConcurrentResource() !== null) {
    const etagElement = _getETagElement(context)

    if (context._.odataReq.isConditional()) {
      const where = _getWhere(context)
      if (where) {
        const cqn = _getSelectCQN(context, where)
        const result = await context.run(cqn.where(removeIsActiveEntityRecursively(where)))

        if (result.length === 1) {
          context._.odataReq.validateEtag(Object.values(result[0])[0])
        } else {
          context._.odataReq.validateEtag('*')
        }
      } else {
        context._.odataReq.validateEtag('*')
      }
    }

    _generateETag(context, etagElement)
  }
}

module.exports = beforeETagCheck
