const {
  messages: { DB_CONNECTION_MISSING }
} = require('../utils/constants')
const getColumns = require('../utils/columns')
const { getTargetData } = require('../utils/defaultHandlers')

const _getSelectCQN = context => {
  const select = context.statements.SELECT.from(context.target, getColumns(context.target, true))
  select.SELECT.where = context.query.DELETE ? context.query.DELETE.where : context.query.UPDATE.where

  return select
}

const _getDeleteCQN = context => {
  const deleteCQN = context.statements.DELETE.from(getTargetData(context.target).target)

  if (context.query.DELETE.where) {
    deleteCQN.DELETE.where = context.query.DELETE.where
  }

  return deleteCQN
}

/**
 * Generic Handler for DELETE requests.
 * In case of success it returns an empty object.
 * If the entry to be deleted does not exist, it rejects with error to return a 404.
 *
 * @param context - operation object, that provides error, continuation and other functions as well as information
 * regarding the current operation.
 * @alias module:handlers.onDelete
 */
const onDelete = () => async context => {
  if (!context.run) {
    context.log.warn(DB_CONNECTION_MISSING)
    return Promise.resolve()
  }

  const result = await context.run(_getSelectCQN(context))

  if (result.length === 0) {
    context.reject(404)
    return
  }

  context._oldData = result[0]

  await context.run(context.query.DELETE ? _getDeleteCQN(context) : context.query)
  return undefined
}

module.exports = onDelete
