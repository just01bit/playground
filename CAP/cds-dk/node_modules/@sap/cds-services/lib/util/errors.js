const CONTEXT_ERROR = 'sap.cds.CONTEXT_ERROR'
const MULTIPLE_ERRORS_MESSAGE = 'Multiple errors occurred. Please see the details for more information.'
const ALLOWED_ERROR_PROPERTIES = ['code', 'message', 'target']

const getModelNotDefinedError = modelName => {
  return new Error(`No valid model provided. Invalid model: ${JSON.stringify(modelName)}`)
}

const filename = (model, service) => {
  if (!model) return ''
  const srv = service ? model.definitions[service] : model.find('service')
  return (srv && srv.$location && `${srv.$location.file}`) || ''
}

const getNotInModelAssociationError = (service, model, event, entityPath, association, entityName) => {
  return new Error(
    `Invalid event handler registration to '${service}' in the model '${filename(
      model
    )}': '${event}', '${entityPath}'.\n Didnâ€™t find association '${association}' in entity definition '${entityName}'.`
  )
}

const getMissingTargetAssociationError = (service, model, event, association, entityName) => {
  return new Error(
    `Invalid event handler registration to '${service}' in the model '${filename(
      model
    )}': '${event}'.\n Missing target for association '${association}' in entity definition '${entityName}'.`
  )
}

const getNotInModelEntityError = (service, event, entity, model) => {
  if (typeof entity === 'string') {
    entity = entity.startsWith(service) ? entity.substr(service.length + 1) : entity
  }
  return new Error(
    `Invalid event handler registration for '${event}' '${entity}' in '${service}'.\n` +
      `Specified entity '${entity}' is not defined in the model '${filename(model, service)}'.`
  )
}

const getNotInModelStringNameEntityError = (service, event, entity, model) => {
  return new Error(
    `Invalid event handler registration to '${service}' in the model '${filename(
      model
    )}': '${event}'.\n Specified CSN entity doesn't have a name of type 'String'.`
  )
}

const getNotInModelKindEntityError = (service, event, entity, model) => {
  return new Error(
    `Invalid event handler registration to '${service}' in the model '${filename(
      model
    )}': '${event}'.\n Specified CSN entity doesn't have a kind of type 'entity'.`
  )
}

const getInvalidEntityPathError = (service, event, entityPath, model) => {
  return new Error(
    `Invalid event handler registration to '${service}' in the model '${filename(
      model
    )}': '${event}'.\n Invalid entity path '${entityPath}'. The path should not start with '/'.`
  )
}

const getNotInModelBoundActionError = (service, event, entity, model) => {
  return new Error(
    `Invalid event handler registration to '${service}': '${event}'.\n Specified bound custom operation '${event}' is not defined within the provided entity '${entity}' in the model '${filename(
      model
    )}'.`
  )
}

const getNotInModelEventError = (service, event, model) => {
  return new Error(
    `Invalid event handler registration to '${service}': '${event}'.\n Specified event '${event}' is not defined in the model '${filename(
      model
    )}'.`
  )
}

const getFeatureNotSupportedError = message => {
  const error = new Error(`Feature is not supported: ${message}`)
  error.statusCode = 501
  return error
}

const getAuditLogNotWrittenError = (rootCauseError, phase, event) => {
  const errorMessage =
    !phase || event === 'READ' ? 'Audit log could not be written' : `Audit log could not be written ${phase}`
  const error = new Error(errorMessage)
  error.rootCause = rootCauseError
  return error
}

/*
 * OData spec:
 *   This object MUST contain name/value pairs with the names code and message,
 *   and it MAY contain name/value pairs with the names target, details and innererror.
 *   [...]
 *   Error responses MAY contain annotations in any of its JSON objects.
 */
const normalizeError = err => {
  const error = {}

  Object.keys(err)
    .concat(['message'])
    .forEach(k => {
      if (ALLOWED_ERROR_PROPERTIES.includes(k)) {
        if (typeof err[k] === 'string' || typeof err[k] === 'number') {
          error[k] = `${err[k]}`
        }
      } else if (k.startsWith('@')) {
        error[k] = err[k]
      }
    })

  if (err.message === MULTIPLE_ERRORS_MESSAGE && err.details) {
    error.details = err.details.map(normalizeError)
  }

  return error
}

const combineErrors = errors => {
  if (errors.length === 0) {
    return
  }

  let err
  if (errors.length === 1) {
    err = errors[0]
  } else {
    err = new Error(MULTIPLE_ERRORS_MESSAGE)
    err.details = errors.map(normalizeError)
  }

  // mixed error codes? -> 500 and add to details
  err.statusCode = errors[0].statusCode
  if (errors.some(e => !e.statusCode || e.statusCode !== err.statusCode)) {
    err.statusCode = 500
  }

  if (!err.code) {
    err.code = `${err.statusCode}`
  }

  err[Symbol.for(CONTEXT_ERROR)] = true

  return err
}

const handleErrorLog = (entry, context, contextSymbol) => {
  if (process.env.NODE_ENV !== 'production' && !entry.handler.isDefault && !contextSymbol) {
    context.log.error(
      `Error while executing custom handler: ${entry.event} ${entry.entity ? 'on ' + entry.entity : ''}`
    )
  }
}

const hasBeenCalledError = (method, query) => {
  return new Error(`Method ${method} has been called before. Invalid CQN: ${JSON.stringify(query)}`)
}

const unexpectedFunctionCallError = (functionName, expectedFunction) => {
  return new Error(`Cannot build CQN object. Invalid call of "${functionName}" before "${expectedFunction}"`)
}

const invalidFunctionArgumentError = (statement, arg) => {
  const details = JSON.stringify(arg, (key, value) => (value === undefined ? '__undefined__' : value)).replace(
    /"__undefined__"/g,
    'undefined'
  )
  return new Error(`Cannot build ${statement} statement. Invalid data provided: ${details}`)
}

module.exports = {
  getModelNotDefinedError,
  getFeatureNotSupportedError,
  getAuditLogNotWrittenError,
  getNotInModelAssociationError,
  getNotInModelEntityError,
  getNotInModelEventError,
  getInvalidEntityPathError,
  getNotInModelBoundActionError,
  getMissingTargetAssociationError,
  getNotInModelKindEntityError,
  getNotInModelStringNameEntityError,
  normalizeError,
  combineErrors,
  handleErrorLog,
  hasBeenCalledError,
  unexpectedFunctionCallError,
  invalidFunctionArgumentError,
  CONTEXT_ERROR,
  MULTIPLE_ERRORS_MESSAGE
}
