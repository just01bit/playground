const _errorCodes = {
  400: 'Bad Request',
  401: 'Unauthorized',
  403: 'Forbidden',
  404: 'Not Found', // alternatively: The server has not found a resource matching the Data Services Request URI.
  405: 'Method Not Allowed',
  406: 'Not Acceptable',
  407: 'Proxy Authentication Required',
  408: 'Request Timeout',
  409: 'Conflict',
  410: 'Gone',
  411: 'Length Required',
  412: 'Precondition Failed',
  413: 'Payload Too Large',
  414: 'URI Too Long',
  415: 'Unsupported Media Type',
  416: 'Range Not Satisfiable',
  417: 'Expectation Failed',
  424: 'Failed Dependency',
  428: 'Precondition Required',
  429: 'Too Many Requests',
  431: 'Request Header Fields Too Large',
  451: 'Unavailable For Legal Reasons',
  500: 'Server Error',
  501: 'The server does not support the functionality required to fulfill the request',
  502: 'Bad Gateway',
  503: 'Service Unavailable',
  504: 'Gateway Timeout'
}

/**
 * Filters the error code for known ones.
 * Fallback to 500 if unknown.
 * @param code
 * @returns {number}
 * @private
 */
const _getStatusCode = code => {
  return _errorCodes[code] ? code : 500
}

/**
 * @param msg
 * @returns {Error}
 * @private
 */
const _getErrorObject = msg => {
  if (typeof msg === 'string') {
    return new Error(msg)
  }

  if (typeof msg === 'object') {
    if (msg instanceof Error) {
      return msg
    }

    return Object.assign(new Error(msg.message || _errorCodes[500]), msg)
  }

  if (typeof msg === 'number') {
    return new Error(_errorCodes[msg])
  }

  return new Error(_errorCodes[500])
}

/**
 * Get error customized for @sap/odata-server as the default Error object will be treated as internal server error.
 * @param {number} [code] - HTTP status code. If unknown to @sap/odata-server, will be overwritten with 500.
 * @param {string|object|Error} msg - Error given by the app developer.
 * @param {String} [target] - Element of entity to which the error relates.
 * @returns {Error}
 */
const getError = (code, msg, target) => {
  if (code && typeof code !== 'number') {
    return getError(undefined, code, msg)
  }

  const error = _getErrorObject(msg || code)
  if (!error.statusCode) {
    error.statusCode = _getStatusCode(code)
  }
  if (code && !error.code) {
    error.code = `${code}`
  }
  if (target && !error.target) {
    error.target = target
  }

  return error
}

module.exports = getError
