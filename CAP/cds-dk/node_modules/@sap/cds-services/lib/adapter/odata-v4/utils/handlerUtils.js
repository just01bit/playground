const expandToCQN = require('../odata-to-cqn/expandToCQN')
const QueryOptions = require('@sap/odata-server').QueryOptions

const _selectForFunction = (selectColumns, result, context) => {
  if (!Array.isArray(result)) {
    return _selectForFunction(selectColumns, [result], context)
  }

  const keys = context._.returnType.keys

  for (const row of result) {
    for (const entry in row) {
      if (keys[entry]) {
        continue
      }

      if (!selectColumns.includes(entry)) {
        delete row[entry]
      }
    }
  }
}
const { ensureDraftsSuffix, isDraftActivateAction } = require('../../../services/utils/draftUtils')
const { isDraftEnabled } = require('../../../services/utils/compositionTree')

const isSingleton = target =>
  target['@odata.singleton'] || (target['@odata.singleton.nullable'] && target['@odata.singleton'] !== false)

const _expandForFunction = async (uriInfo, result, context, service) => {
  if (!Array.isArray(result)) {
    return _expandForFunction(uriInfo, [result], context, service)
  }

  const promises = []
  const isDraft = isDraftEnabled(service.model.definitions, context._.returnType)
  const isDraftActivate = isDraftActivateAction(context)

  for (const row of result) {
    const selectQuery = context.statements.SELECT.from(
      isDraft && !isDraftActivate ? ensureDraftsSuffix(context._.returnType.name) : context._.returnType
    )
    for (const key in context._.returnType.keys) {
      if ((!isDraft || isDraftActivate) && key === 'IsActiveEntity') {
        continue
      }
      selectQuery.where(key, row[key])
    }

    const expandCqn = _expand(context._.returnType, service.options.maxExpandSize, uriInfo)
    selectQuery.columns(expandCqn)

    promises.push(
      context.run(selectQuery).then(expandResult => {
        if (expandResult) {
          Object.assign(row, expandResult[0])
        }
      })
    )
  }
  return Promise.all(promises)
}

const _expand = (reflectedEntity, maxExpandSize, uriInfo) => {
  const expand = uriInfo.getQueryOption(QueryOptions.EXPAND)

  if (!expand || expand.length === 0) {
    return []
  }

  return expandToCQN(reflectedEntity, maxExpandSize, expand, uriInfo.getFinalEdmType())
}

const _cleanupResult = (result, context) => {
  if (!Array.isArray(result)) {
    return _cleanupResult([result], context)
  }

  for (const row of result) {
    for (const element in context._.returnType.elements) {
      if (context._.returnType.elements[element].is2many) {
        delete row[element]
      }
    }
  }
}

const actionAndFunctionQueries = async (context, req, result, service) => {
  _cleanupResult(result, context)

  if (req.getQueryOptions().$select) {
    _selectForFunction(req.getQueryOptions().$select.split(','), result, context)
  }
  if (req.getQueryOptions().$expand) {
    await _expandForFunction(req.getUriInfo(), result, context, service)
  }
}

module.exports = {
  _expand,
  actionAndFunctionQueries,
  isSingleton
}
