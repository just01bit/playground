const _backLinkCustom = (entityKey, targetKey, element) => {
  const backlink = {
    entityKey: entityKey.startsWith(`${element.name}.`) ? entityKey.replace(`${element.name}.`, '') : entityKey,
    targetKey: targetKey.startsWith(`${element.name}.`) ? targetKey.replace(`${element.name}.`, '') : targetKey,
    skip: true
  }

  if (element.parent.elements[backlink.targetKey] && element._target.elements[backlink.entityKey]) {
    return backlink
  } else if (element.parent.elements[backlink.entityKey] && element._target.elements[backlink.targetKey]) {
    return { entityKey: backlink.targetKey, targetKey: backlink.entityKey }
  }

  return backlink
}

const getOnCondElements = element => {
  if (element.on) {
    const entityKey = element.on[2].ref.join('.')
    const targetKey = element.on[0].ref.join('.')

    return { entityKey, targetKey }
  }
}

const _backlinkForCustomOn = element => {
  if (!element.on) {
    return
  }
  const { entityKey, targetKey } = getOnCondElements(element)
  return _backLinkCustom(entityKey, targetKey, element)
}

const _backLinkNameFromOn = element => {
  const onCondElement1 = element.on[0].ref.length === 2 ? element.on[0].ref[1] : element.on[0].ref[0]
  const onCondElement2 = element.on[2].ref.length === 2 ? element.on[2].ref[1] : element.on[2].ref[0]

  return onCondElement1 === '$self' ? onCondElement2 : onCondElement1
}

const isSelfManaged = onCond => {
  if (onCond.on && onCond.on.length > 2) {
    return onCond.on[0].ref[0] === '$self' || onCond.on[2].ref[0] === '$self'
  }
  return false
}

const _buildBacklinks = (prefix, entityKeys) => {
  const backLinks = []
  for (const entityKey of entityKeys) {
    if (entityKey !== 'IsActiveEntity') {
      backLinks.push({ entityKey: `${prefix}_${entityKey}`, targetKey: entityKey })
    }
  }

  return backLinks
}

const _onBacklinks = (element, entityKeys) => {
  if (isSelfManaged(element)) {
    const prefix = _backLinkNameFromOn(element)

    const customBacklink = _backlinkForCustomOn(element._target.elements[prefix])
    if (customBacklink) {
      return [{ entityKey: customBacklink.targetKey, targetKey: customBacklink.entityKey, skip: customBacklink.skip }]
    }

    return _buildBacklinks(prefix, entityKeys)
  } else {
    return [_backlinkForCustomOn(element)]
  }
}

const getBackLinks = (element, entityKeys) => {
  if (element.on) {
    return _onBacklinks(element, entityKeys)
  }

  return _buildBacklinks(element.name, entityKeys)
}

module.exports = {
  getBackLinks,
  isSelfManaged,
  getOnCondElements
}
