const rollback = msg => {
  if (!msg || !msg._ || !msg._.shared || !msg._.shared.connections) {
    return null
  }

  if (msg._.shared.connections.size === 1) {
    return msg._.shared.connections
      .values()
      .next()
      .value.rollback()
  }

  const rollbacks = []

  for (const transaction of msg._.shared.connections.values()) {
    rollbacks.push(transaction.rollback())
  }

  return Promise.all(rollbacks)
}

const commit = msg => {
  if (!msg || !msg._ || !msg._.shared || !msg._.shared.connections) {
    return null
  }

  if (msg._.shared.connections.size === 1) {
    return msg._.shared.connections
      .values()
      .next()
      .value.commit(true)
  }

  const commits = []

  for (const transaction of msg._.shared.connections.values()) {
    commits.push(transaction.commit(true))
  }

  return Promise.all(commits)
}

module.exports = { commit, rollback }
