"use strict";
/*!
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var cloud_sdk_util_1 = require("@sap/cloud-sdk-util");
var environment_accessor_1 = require("./environment-accessor");
var token_accessor_1 = require("./token-accessor");
var logger = cloud_sdk_util_1.createLogger({
    package: 'core',
    messageContext: 'connectivity-service'
});
/**
 * Given a destination and a JWT (required for subscriber destinations), this function will add a proxy configuration to a destination.
 * See also [[ProxyConfiguration]].
 *
 * This function will reject if no connectivity service is bound, no XSUAA service with plan application is bound or the client credentials grant with the XSUAA service fails.
 *
 * @param {Destination} destination The destination to which the proxy configuration should be added.
 * @param {string} jwt The JWT of the current user.
 * @returns {Promise<Destination>} A promise resolving to the destiation with the added proxy configuration.
 */
function addProxyConfiguration(destination, jwt) {
    return Promise.resolve()
        .then(function () { return proxyHostAndPort(); })
        .then(function (hostAndPort) { return addHeaders(hostAndPort, jwt); })
        .then(function (proxyConfiguration) { return (__assign({}, destination, { proxyConfiguration: proxyConfiguration })); });
}
exports.addProxyConfiguration = addProxyConfiguration;
function proxyHostAndPort() {
    var service = readConnectivityServiceBinding();
    return {
        host: service.credentials.onpremise_proxy_host,
        port: service.credentials.onpremise_proxy_port
    };
}
function readConnectivityServiceBinding() {
    var serviceBindings = environment_accessor_1.EnvironmentAccessor.getServiceList('connectivity');
    if (!serviceBindings.length) {
        throw new Error('No binding to a connectivity service found! Please make sure to bind an instance of the connectivity service to your app if you want to connect to on-premise destinations.');
    }
    return serviceBindings[0];
}
function addHeaders(hostAndPort, jwt) {
    var connServiceBinding = readConnectivityServiceBinding();
    return Promise.resolve()
        .then(function () { return proxyAuthorizationHeader(connServiceBinding, jwt); })
        .then(function (proxyAuthHeader) { return (__assign({}, proxyAuthHeader, sapConnectivityAuthenticationHeader(jwt))); })
        .then(function (headers) {
        return (__assign({}, hostAndPort, { headers: headers }));
    });
}
function proxyAuthorizationHeader(connectivityServiceBinding, userJwt) {
    return token_accessor_1.serviceToken(connectivityServiceBinding, { userJwt: userJwt })
        .then(function (token) { return ({
        'Proxy-Authorization': "Bearer " + token
    }); })
        .catch(function (error) {
        throw cloud_sdk_util_1.errorWithCause('Failed to add proxy authorization header - client credentials grant failed!', error);
    });
}
function sapConnectivityAuthenticationHeader(jwt) {
    if (jwt) {
        return {
            'SAP-Connectivity-Authentication': "Bearer " + jwt
        };
    }
    logger.warn("Unable to create \"SAP-Connectivity-Authentication\" header: no JWT found on the current request.\n    Continuing without header. Connecting to on-premise systems may not be possible.");
    return {};
}
//# sourceMappingURL=connectivity-service.js.map