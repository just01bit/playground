"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var uri_value_converter_1 = require("../uri-value-converter");
var filter_1 = require("./filter");
/**
 * Data structure to represent OData V2 filter functions.
 * Use the factory function [[filterFunction]] to create instances of `FilterFunction`.
 */
var FilterFunction = /** @class */ (function () {
    /**
     * Creates an instance of FilterFunction.
     * @param functionName Name of the function
     * @param parameters Representation of the parameters passed to the filter function
     */
    function FilterFunction(functionName, parameters) {
        this.functionName = functionName;
        this.parameters = parameters;
    }
    /**
     * Serializes the filter function into a string
     *
     * @param parentFieldNames Names of parents in case the function is part of a filter on a navigation property
     * @returns The filter function as string
     */
    FilterFunction.prototype.toString = function (parentFieldNames) {
        var _this = this;
        if (parentFieldNames === void 0) { parentFieldNames = []; }
        var params = this.parameters.map(function (param) { return _this.transformParameter(param, parentFieldNames); }).join(', ');
        return this.functionName + "(" + params + ")";
    };
    /**
     * Creates an instance of Filter for this filter function and the given value using the operator 'eq', i.e. `==`.
     *
     * @param value Value to be used in the filter
     * @param edmType EdmType of the value, used when converting the value to URL. Use `Edm.String` as default value.
     * @returns The resulting filter
     */
    FilterFunction.prototype.equals = function (value) {
        return new filter_1.Filter(this, 'eq', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this filter function and the given value using the operator 'ne', i.e. `!=`.
     *
     * @param value Value to be used in the filter
     * @param edmType EdmType of the value, used when converting the value to URL. Use `Edm.String` as default value.
     * @returns The resulting filter
     */
    FilterFunction.prototype.notEquals = function (value) {
        return new filter_1.Filter(this, 'ne', value, this.edmType);
    };
    /**
     * For different type of filter function parameters, build a function that generates a string as url pattern.
     * @param param One parameter of the filter function
     * @param parentFieldNames The parent field name list used when the field with navigation properties are involved
     * @returns A function that convert the parameter to url pattern.
     */
    FilterFunction.prototype.transformParameter = function (param, parentFieldNames) {
        if (typeof param === 'number') {
            return param.toString();
        }
        else if (typeof param === 'string') {
            return uri_value_converter_1.convertToUriForEdmString(param);
        }
        else if (param instanceof FilterFunction) {
            return param.toString(parentFieldNames);
        }
        return parentFieldNames.concat([param._fieldName]).join('/');
    };
    return FilterFunction;
}());
exports.FilterFunction = FilterFunction;
//# sourceMappingURL=filter-function.js.map