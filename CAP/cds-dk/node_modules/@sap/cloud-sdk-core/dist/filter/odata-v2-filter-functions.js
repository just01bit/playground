"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var boolean_filter_function_1 = require("./boolean-filter-function");
var number_filter_function_1 = require("./number-filter-function");
var string_filter_function_1 = require("./string-filter-function");
/**
 * Build an OData (V2) filter function to test whether a string is a substring of the other. Evaluates to boolean.
 * @param p0 The substring to test for. This can either be a string, a reference to a field or another filter function.
 * @param p1 The string to test. This can either be a string, a reference to a field or another filter function.
 *
 * @returns The newly created filter function
 */
function substringOf(p0, p1) {
    return filterFunction('substringof', 'boolean', p0, p1);
}
exports.substringOf = substringOf;
/**
 * Build an OData (V2) filter function to get a substring starting from a designated position. Evaluates to string.
 * @param p0 the original string. This can either be a string, a reference to a field or another filter function.
 * @param pos the starting position of the original string. This can be either a number, a reference to a field or another filter function.
 * @returns The newly created filter function
 */
function substring(p0, pos) {
    return filterFunction('substring', 'string', p0, pos);
}
exports.substring = substring;
/**
 * Build an OData (V2) filter function to get the length of a string.
 * @param p0 the given string for computing the length
 * @returns The newly created filter function
 */
function length(p0) {
    return filterFunction('length', 'int', p0);
}
exports.length = length;
/**
 * Build a custom OData (V2) filter function.
 * @param functionName the name of the function, e.g., `substring`
 * @param returnType the return type of the filter function
 * @param parameters the parameter(s) used in the function
 * @returns An instance of filter function suited for the given return type
 */
function filterFunction(functionName, returnType) {
    var parameters = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        parameters[_i - 2] = arguments[_i];
    }
    if (returnType === 'boolean') {
        return new boolean_filter_function_1.BooleanFilterFunction(functionName, parameters);
    }
    if (returnType === 'string') {
        return new string_filter_function_1.StringFilterFunction(functionName, parameters);
    }
    return new number_filter_function_1.NumberFilterFunction(functionName, parameters, returnTypeToEdmType[returnType]);
}
exports.filterFunction = filterFunction;
var returnTypeToEdmType = {
    int: 'Edm.Int32',
    double: 'Edm.Double',
    decimal: 'Edm.Decimal'
};
//# sourceMappingURL=odata-v2-filter-functions.js.map