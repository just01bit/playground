"use strict";
/*!
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var entity_1 = require("./entity");
var payload_value_converter_1 = require("./payload-value-converter");
var selectable_1 = require("./selectable");
var util_1 = require("./util");
/**
 * Extracts all custom fields from the JSON payload for a single entity.
 * In this context, a custom fields is every property that is not known in the corresponding entity class.
 *
 * @param json The JSON payload.
 * @param entityConstructor The constructor function of the entity class.
 * @returns An object containing the custom fields as key-value pairs.
 */
function extractCustomFields(json, entityConstructor) {
    var regularODataProperties = ['__metadata', '__deferred'].concat(entityConstructor._allFields.map(function (field) { return field._fieldName; }));
    var regularFields = new Set(regularODataProperties);
    return Object.keys(json)
        .filter(function (key) { return !regularFields.has(key); })
        .reduce(function (customFields, key) {
        customFields[key] = json[key];
        return customFields;
    }, {});
}
exports.extractCustomFields = extractCustomFields;
/**
 * Converts the JSON payload for a single entity into an instance of the corresponding generated entity class.
 * It sets the remote state to the data provided by the JSON payload.
 * If a version identifier is found in the '__metadata' or in the request header, the method also sets it.
 *
 * @param json The JSON payload.
 * @param entityConstructor The constructor function of the entity class.
 * @param requestHeader: Optional parameter which may be used to add a version identifier (etag) to the entity
 * @returns An instance of the entity class.
 */
function deserializeEntity(json, entityConstructor, requestHeader) {
    var etag = extractODataETag(json) || extractEtagFromHeader(requestHeader);
    return entityConstructor._allFields
        .filter(function (field) { return entity_1.isSelectedProperty(json, field); })
        .reduce(function (entity, staticField) {
        entity[util_1.toPropertyFormat(staticField._fieldName)] = getFieldValue(json, staticField);
        return entity;
    }, new entityConstructor())
        .initializeCustomFields(extractCustomFields(json, entityConstructor))
        .setVersionIdentifier(etag)
        .setOrInitializeRemoteState();
}
exports.deserializeEntity = deserializeEntity;
function extractEtagFromHeader(headers) {
    return headers ? headers['Etag'] || headers['etag'] : undefined;
}
function extractODataETag(json) {
    return '__metadata' in json ? json['__metadata']['etag'] : undefined;
}
function getFieldValue(json, selectable) {
    if (selectable instanceof selectable_1.EdmTypeField) {
        return payload_value_converter_1.edmToTs(json[selectable._fieldName], selectable.edmType);
    }
    else if (selectable instanceof selectable_1.Link) {
        return getLinkFromJson(json, selectable);
    }
    else if (selectable instanceof selectable_1.ComplexTypeField) {
        return deserializeComplexType(json[selectable._fieldName], selectable);
    }
}
function getLinkFromJson(json, link) {
    return link instanceof selectable_1.OneToOneLink ? getSingleLinkFromJson(json, link) : getMultiLinkFromJson(json, link);
}
// be careful: if the return type is changed to `LinkedEntityT | undefined`, the test 'navigation properties should never be undefined' of the 'business-partner.spec.ts' will fail.
// not sure the purpose of the usage of null.
function getSingleLinkFromJson(json, link) {
    if (entity_1.isExpandedProperty(json, link)) {
        var entity = deserializeEntity(json[link._fieldName], link._linkedEntity);
        return entity;
    }
    return null;
}
function getMultiLinkFromJson(json, link) {
    if (entity_1.isSelectedProperty(json, link)) {
        var results = json[link._fieldName].results || [];
        return results.map(function (linkJson) { return deserializeEntity(linkJson, link._linkedEntity); });
    }
}
function deserializeComplexType(json, selectable) {
    return Object.entries(selectable)
        .filter(function (_a) {
        var _ = _a[0], field = _a[1];
        return field instanceof selectable_1.EdmTypeField && typeof json[field._fieldName] !== 'undefined';
    })
        .reduce(function (complexTypeObject, _a) {
        var fieldName = _a[0], field = _a[1];
        complexTypeObject[util_1.toPropertyFormat(fieldName)] = payload_value_converter_1.edmToTs(json[field._fieldName], field.edmType);
        return complexTypeObject;
    }, {});
}
//# sourceMappingURL=entity-deserializer.js.map