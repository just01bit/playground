"use strict";
/*!
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var filter_1 = require("../../filter");
var selectable_1 = require("../../selectable");
var uri_value_converter_1 = require("../../uri-value-converter");
var util_1 = require("../../util");
/**
 * Get an object containing the given filter as query parameter, or an empty object if none was given.
 *
 * @typeparam EntityT Type of the entity to filter on
 * @param filter The filter to transform to a query parameter
 * @param entityConstructor Constructor type of the entity to filter on
 * @returns {Partial<{ filter: string; }>} An object containing the query parameter or an empty object
 */
function getQueryParametersForFilter(filter, entityConstructor) {
    if (typeof filter !== 'undefined') {
        var filterExpression = getODataFilterExpression(filter, [], entityConstructor);
        if (filterExpression) {
            return {
                filter: filterExpression
            };
        }
    }
    return {};
}
exports.getQueryParametersForFilter = getQueryParametersForFilter;
function getODataFilterExpression(filter, parentFieldNames, targetEntityConstructor) {
    if (parentFieldNames === void 0) { parentFieldNames = []; }
    if (filter_1.isFilterList(filter)) {
        filter.flatten();
        var andExp = filter.andFilters
            .map(function (subFilter) { return getODataFilterExpression(subFilter, parentFieldNames, targetEntityConstructor); })
            .filter(function (f) { return !!f; })
            .join(' and ');
        andExp = andExp ? "(" + andExp + ")" : andExp;
        var orExp = filter.orFilters
            .map(function (subFilter) { return getODataFilterExpression(subFilter, parentFieldNames, targetEntityConstructor); })
            .filter(function (f) { return !!f; })
            .join(' or ');
        orExp = orExp ? "(" + orExp + ")" : orExp;
        var exp = [];
        if (andExp) {
            exp.push(andExp);
        }
        if (orExp) {
            exp.push(orExp);
        }
        return exp.join(' and ');
    }
    if (filter_1.isFilterLink(filter)) {
        var linkExp = filter.filters
            .map(function (subFilter) { return getODataFilterExpression(subFilter, parentFieldNames.concat([filter.link._fieldName]), filter.link._linkedEntity); })
            .filter(function (f) { return !!f; })
            .join(' and ');
        linkExp = linkExp ? "(" + linkExp + ")" : linkExp;
        return linkExp;
    }
    if (filter_1.isFilter(filter)) {
        if (typeof filter.field === 'string') {
            var field = retrieveField(filter.field, targetEntityConstructor, filter.edmType);
            var value = uri_value_converter_1.convertToUriFormat(filter.value, field.edmType);
            return [parentFieldNames.concat([filter.field]).join('/'), filter.operator, value].join(' ');
        }
        else {
            var value = uri_value_converter_1.convertToUriFormat(filter.value, filter.edmType);
            return [filter.field.toString(parentFieldNames), filter.operator, value].join(' ');
        }
    }
}
function retrieveField(filterField, targetEntityConstructor, filterEdmType) {
    // In case of complex types there will be a property name as part of the filter.field
    var fieldName = filterField.split('/')[0];
    var field = targetEntityConstructor[util_1.toStaticPropertyFormat(fieldName)];
    if (field instanceof selectable_1.ComplexTypeField) {
        return Object.values(field)
            .filter(function (pField) { return pField.fieldPath; }) // filter for ComplexTypePropertyFields only
            .find(function (pField) { return pField.fieldPath() === filterField; });
    }
    // In case of custom field we infer then the returned field from the filter edmType property
    return field || { edmType: filterEdmType };
}
//# sourceMappingURL=get-filters.js.map